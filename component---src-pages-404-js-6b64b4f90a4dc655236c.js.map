{"version":3,"file":"component---src-pages-404-js-6b64b4f90a4dc655236c.js","mappings":"+IAoDA,IA/CeA,IAAoC,IAAnC,SAAEC,EAAQ,MAAEC,EAAK,SAAEC,GAAUH,EAC3C,MACMI,EADcC,8BACDJ,EAASK,SAC5B,IAAIC,EA4BJ,OAzBEA,EADEH,EAEAI,EAAAA,cAAA,OAAKC,UAAU,UACbD,EAAAA,cAAA,OAAKC,UAAU,kBACbD,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAG,SAAQ,UAMrBH,EAAAA,cAAA,OAAKC,UAAU,gCACbD,EAAAA,cAAA,OAAKC,UAAU,kBACbD,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAG,KAAI,cAEfH,EAAAA,cAAA,OAAKC,UAAU,wBACbD,EAAAA,cAAA,OAAKC,UAAU,kBACbD,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAG,SAAQ,SAEnBH,EAAAA,cAAA,OAAKC,UAAU,kBACbD,EAAAA,cAACE,EAAAA,KAAI,CAACC,GAAG,KAAI,cAQrBH,EAAAA,cAAA,OAAKC,UAAU,iBAAiB,oBAAmBL,GACjDI,EAAAA,cAAA,UAAQC,UAAU,iBAAiBF,GACnCC,EAAAA,cAAA,QAAMC,UAAU,qBAAqBN,GACrCK,EAAAA,cAAA,cAAQ,MACH,IAAII,MAAOC,cAAc,eAC5B,IAAK,OAELL,EAAAA,cAAA,KAAGC,UAAU,gBAAgBK,KAAK,4BAA2B,WAI3D,C,+CCCV,IAvCYd,IAAuC,IAADe,EAAAC,EAAAC,EAAA,IAArC,YAAEC,EAAW,MAAEhB,EAAK,SAAEC,GAAUH,EAC3C,MAAM,KAAEmB,IAASC,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBH,GAAeC,EAAKG,aAAaJ,YACnDK,EAAgC,QAApBR,EAAGI,EAAKG,oBAAY,IAAAP,OAAA,EAAjBA,EAAmBb,MAExC,OACEM,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQe,EAAkBrB,EAAK,MAAMqB,EAAiBrB,GACtDM,EAAAA,cAAA,QAAMgB,KAAK,cAAcC,QAASJ,IAClCb,EAAAA,cAAA,QAAMkB,SAAS,WAAWD,QAASvB,IACnCM,EAAAA,cAAA,QAAMkB,SAAS,iBAAiBD,QAASJ,IACzCb,EAAAA,cAAA,QAAMkB,SAAS,UAAUD,QAAQ,YACjCjB,EAAAA,cAAA,QAAMgB,KAAK,eAAeC,QAAQ,YAClCjB,EAAAA,cAAA,QACEgB,KAAK,kBACLC,SAA0B,QAAjBT,EAAAG,EAAKG,oBAAY,IAAAN,GAAQ,QAARC,EAAjBD,EAAmBW,cAAM,IAAAV,OAAR,EAAjBA,EAA2BW,UAAO,KAE7CpB,EAAAA,cAAA,QAAMgB,KAAK,gBAAgBC,QAASvB,IACpCM,EAAAA,cAAA,QAAMgB,KAAK,sBAAsBC,QAASJ,IACzClB,EACA,C,kGCvCP,MAWa0B,EAAOA,IAAMrB,EAAAA,cAACsB,EAAAA,EAAG,CAAC5B,MAAM,mBAErC,UAbqBF,IAAyB,IAAxB,KAAE+B,EAAI,SAAE9B,GAAUD,EACtC,MAAMgC,EAAYD,EAAKZ,KAAKG,aAAapB,MAEzC,OACEM,EAAAA,cAACyB,EAAAA,EAAM,CAAChC,SAAUA,EAAUC,MAAO8B,GACjCxB,EAAAA,cAAA,UAAI,kBACJA,EAAAA,cAAA,SAAG,2DACI,C","sources":["webpack://Rudesoul's Blog/./src/components/layout.js","webpack://Rudesoul's Blog/./src/components/seo.js","webpack://Rudesoul's Blog/./src/pages/404.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport \"../components/components.css\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <div className=\"navbar\">\n        <div className=\"navbar-heading\">\n          <Link to=\"/blog\">blog</Link>\n        </div>\n      </div>\n    )\n  } else {\n    header = (\n      <div className=\"navbar justify-content-space\">\n        <div className=\"navbar-heading\">\n          <Link to=\"/\">@rudesoul</Link>\n        </div>\n        <div className=\"flex navbar-heading2\">\n          <div className=\"navbar-heading\">\n            <Link to=\"/blog\">blog</Link>\n          </div>\n          <div className=\"navbar-heading\">\n            <Link to=\"/\">contact</Link>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main className=\"content-container\">{children}</main>\n      <footer>\n        © {new Date().getFullYear()}, Built with\n        {` `}\n        ❤️ &\n        <a className=\"footer-gatsby\" href=\"https://www.gatsbyjs.com\">\n          Gatsby\n        </a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst NotFoundPage = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h1>404: Not Found</h1>\n      <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n    </Layout>\n  )\n}\n\nexport const Head = () => <Seo title=\"404: Not Found\" />\n\nexport default NotFoundPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"names":["_ref","location","title","children","isRootPath","__PATH_PREFIX__","pathname","header","React","className","Link","to","Date","getFullYear","href","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","Head","Seo","data","siteTitle","Layout"],"sourceRoot":""}